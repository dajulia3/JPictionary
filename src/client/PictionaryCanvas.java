/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PictionaryCanvas.java
 *
 * Created on Apr 22, 2010, 1:56:51 PM
 */

package client;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;

/**
 *
 * @author jdl3
 */
public class PictionaryCanvas extends javax.swing.JPanel {

    public final Color DEFAULT_COLOR = Color.BLACK;
    public final Color BACKGROUND_COLOR = Color.WHITE;
    BufferedImage canvas;

    /** Creates new form PictionaryCanvas */
    public PictionaryCanvas() {
        initComponents();

        canvas = makeCanvas(500, 500);
        resetCanvas();

        Dimension size = new Dimension(canvas.getWidth(), canvas.getHeight());
        setPreferredSize(size);
        setMinimumSize(size);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void setDrawSize(int width, int height) {
    	canvas = makeCanvas(width, height);
    	resetCanvas();
    }
    
    private BufferedImage makeCanvas(int width, int height) {
    	return new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
    }
    
    public int getXOff() {
       return (getWidth() - canvas.getWidth())/2;
    }

    public int getYOff() {
        return (getHeight() - canvas.getHeight())/2;
    }

    @Override
    public void paint(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;

        g2.drawImage(canvas, getXOff(), getYOff(), this); // Draw the canvas.

        paintComponents(g); // If I ever add any, they'll go on top.
    }

    public void drawPoint(int x, int y) {
        drawPoint(x, y, DEFAULT_COLOR);
    }

    public void drawPoint(int x, int y, Color c) {
        if (x >= 0 && x < canvas.getWidth() && y >= 0 && y < canvas.getHeight()) {
            canvas.setRGB(x, y, c.getRGB());
        }
    }

    public void resetCanvas() {
        Graphics g = canvas.getGraphics();
        g.setColor(BACKGROUND_COLOR);

        g.fillRect(0, 0, canvas.getWidth(), canvas.getHeight());

        g.dispose();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
